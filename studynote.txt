[0. Introduction]

Typescript란? 

-JS를 기반으로 한 프로그래밍 언어.
(JS랑 분명히 다르지만, 거의 똑같은!)
TS는 JS복붙인데, 거기에다 새로운 기능만 살짝 추가한 것.

-strongly-typed 언어 : 실행하기 전에 data type를 검사한다.

-자바스크립트를 예시로 들어보자.
const plus = (a,b) => a+b 라는 함수가 있을 때
plus(2,2)는 4라는 결과값을 주지만, js는 a와 b가 어떤 타입이어야 하는지 전혀 모른다. 
js는 그냥 a+b결과만 내보내줄 뿐이다.
그렇다면 plus (2,"hi")를 해볼까? '2hi'가 나와버린다.

js에게 a,b가 언제나 number라는 사실을 말해주고 싶다.
만약 a,b가 number 타입이 아닐 경우, 나한테 알려주게 하려면?

코드를 publish하기 전에 js가 도와줄 수 있는 방법이 있을까? 없다. js는 도와주지 않을 것이다. stongly-typed된 언어가 아니기 때문이다.

- 그렇다면 typescript는 뭐가 다를까? 프로그램이 작동하기 전에, '이 데이터타입은 뭐야?'라고 한번 체크해 준다.
- Typescript는 뭐가 틀렸는지 말해준다구! js랑 똑같지만, '~~가 틀렸어'라고 말하는 것 빼고는 다 똑같다.

- TS 세계에서는, const plus = (a,b) => a + b;에서 a와 b가 어떤 데이터타입을 가지는지 모른다며 잔소리를 막 해댄다. js는 마이웨이임. 안알랴줌

const plus = (a:number, b:number) => a + b;

- but, 브라우저는 TS를 알아듣지 못한다. TS는 compile해서 보통의 JS로 만들어준다!!! ㅋㅋ 

protection은 코드가 발행되기 '전'에 일어난다.

[3.1 DefinitelyTyped]
create react app 할 때 TS 구성하기 
npx create-react-app my-app(내 앱 이름) --template typescript
npx create-react-app myts --template typescript

기존 파일에 TS 쓰기
1. 홈페이지에서 기존 프로젝트에 TS 적용하는 코드 복사 후 터미널에 복붙!
npm i --save-dev typescript @types/node
2. 확장명 바꾸기 : js->ts 
3. react + typescript = .tsx

TS 는 Styled Component가 무엇인지 모른다...! 알려줘야함.

어떤 라이브러리나 패키지는 TS로 만들어진 게 아니라는 사실을 기억하자.
만약 이런 라이브러리가 JS가 만들어졌다면, TS는 이게 뭔지 모르기 때문에 불만을 표시할 것이다.
TS는 코드가 실행되기 전 에러를 알려줘야 하는데, 아무것도 모른다...?

오류창에서 나오는 TS로 바꾸는 코드를 한번 해보자!

*여기서 깨알같이...node.js는 자바스크립트를 브라우저뿐만 아니라, 컴퓨터 속에서 여러가지 용도로 확정 사용할 수 있게 해 준다.


속편하게 하는 법
npx create-react-app 내 앱 이름 --template typescript
npm i --save-dev @types/styled-components
npm i styled-components
하세요~!!
App, index 내용은 복사하면 되니!!

혹시 root 때문에 에러나시는 분
const root = ReactDOM.createRoot(document.getElementById("root") as HTMLElement);
이거로 변경해보세요


마법의 @types 는 무엇일까?
@types ? TS 사용을 위한 매우 큰 깃헙 레퍼지토리. 모든 유명한 npm 패키지를 다 가지고 있음.

Type definition 이란, styled-component의 소스 코드를 보고 TS에게 해 줄 설명을 만들어 내는 것.

TS에게 이게 뭔지 설명해주는 것이다!

DefinitelyTyped에 우리도 공헌할 수 있음 ^ㅇ^/ 


[3.2 Typing the Props]

How to type?
component에게 type를 주는 것!

TS에게 내 component가 가져야 하는 prop을 설명해 주고 싶다!?

Prop Types는 브라우저 콘솔에다가 내용을 표시해준다. 코드가 실행한 '후'에 표시해주는 것이다.

interface 안에다가는 TS에게 object shape를 설명해줄 것이다.

interface CircleProps {
    bgColor:string;

}

function Circle({ bgColor } : CircleProps) {
    return <Container />;
}
요게 뜻하는 것 : bgColor의 타입은 CircleProps의 object이다 라고 말해주고 있는 것.

따라서 CircleProps 안에느 bgColor가 있어야 하고, 이것은 string이어야 한다.

*깨알같은 복습
props를 그대로 불러오는 방법 
props:bgColor또는 {bgColor}
그 밑에있는 props의 값에도 props.bgColor라고 할지 그냥 bgColor라고 할지!!

하지만 이렇게 했을 때, TS는 스타일 컴포넌트인 Container를 그냥 div로 인식하므로, interface를 하나 더 만들어서 스타일 컴포넌트에도 보내줄 필요가 있다.

interface는 object type를 설명해 주는 것!

interface로 prop타입을 한번 더 정해준 다음, 스타일 컴포넌트 요소 뒤에 <아까만든 인터페이스> 이렇게 넣어준다.


interface ContainerProps {
    bgColor: string;
}

const Container = styled.div<ContainerProps>``;

어떻게 우리 자신과 props를 interface를 사용하여 보호하는지!를 이번 강의를 통해 배울 수 있었다.


[3.3 Optional Props]
이 props가 optional하냐, required하냐!

props가 optional하다는 걸 보여주는 방법? ?를 붙여주면 된다!

interface CircleProps {
    bgColor:string;
    borderColor? :string;
}

내가 Circle.tsx에 작성한 코드에서, 
Circleprops에서는 borderColor가 옵셔널하지만, 그 밑에 있는 return값의 Container interface에서는 필수값이다.

따라서 이 경우, 스타일 컴포넌트인 Container의 프롭스 값에 ?? 를 추가해 초기값을 넣어주어야 한다. 

컴포넌트, 스타일 컴포넌트의 일치!

- 우리는 Circle 컴포넌트의 props를 변경해주고, props를 하나 더 추가해줬다.
- 이 props를 optional로 만들기 위해서는, interface에서 ?넣어주거나 undefined 넣어준다.

- 하지만 스타일 컴포넌트에서는 이 props가 피룻이기 때문에, 디폴트 값을 넣어주어야 한다.



*니꼬의 꿑팁
TS는 아니지만, default 값을 argument에서 설정하는 방법

function Circle({bgColor, borderColor, text = "Default Text"} : CircleProps) {
    return <Container bgColor={bgColor} borderColor={borderColor ?? bgColor}>
    {text}
    </Container>;
}

argument에 = 해놓고 대놓고 값을 입력하면, 그게 default 값이 된다.


[3.4 State]
TS + React State

*깨알 복습
만약 component를 업데이트하고 싶다면, state를 바꿔야 한다.

그리고 state를 바꾼다면, react.js가 상태를 업데이트 해줄 것이다.

TS는 useState의 초기값을 가지고도 데이터 타입을 추측한다.

초기값에 무엇이 들어있냐에 따라 데이터타입을 결정함. 예를들면, 초기값에 불리언이 들어있으면 불리언만 올 수 있다고 생각한다!

    const [counter, setCounter] = useState(1);

이 경우는 TS가 counter의 데이터타입을 넘버라고 생각함.

  const [counter, setCounter] = useState<number|string>(1);
    setCounter("Hello");

이렇게 useState 뒤에 <데이터타입 | 데이터타입> 적어주면 이거랑 상관없이 다 accept한다.

[3.5 Forms]
리액트, 타입스크립트의 도움을 이용해 form 구현해보기

- 우리는 TS에게 최대한 정확한 type를 알려주기 위해 노력해야 한다
- 그냥 any를 사용하지 말 것.

const onChange = (e: React.FormEvent) => {}
이런식으로 이벤트의 타입을 정해줄 수 있다.
예시의 FormEvent의 경우, onChange에 넣었을 때 이벤트 일으킬 수 있는 함수가 와야한다는 사실을 명시한다.

현재 이 TS는 onChange함수가 InputElement에 의해 실행될 것을 알게 된다.

TS는 target 대신 currentTarget을 택했음!

onChange, onSubmit 모두 React.FormEvent라 할 수 있다.
